From 915aa2ddb8c689994531a5a5211636919fc43e04 Mon Sep 17 00:00:00 2001
From: Julien Schueller <schueller@phimeca.com>
Date: Thu, 14 Feb 2019 16:03:30 +0100
Subject: [PATCH] WelchFactory: Boost build(Field)

The use of std::copy to copy around contiguous data from a timeseries yields
a serious x127 (317->2.5s) speedup in a new testcase and becomes comparable to scipy.

The bottleneck is the FFT decomposition now as expected.
---
 lib/src/Base/Stat/WelchFactory.cxx | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/lib/src/Base/Stat/WelchFactory.cxx b/lib/src/Base/Stat/WelchFactory.cxx
index 5415bf579..6003792cd 100644
--- a/lib/src/Base/Stat/WelchFactory.cxx
+++ b/lib/src/Base/Stat/WelchFactory.cxx
@@ -203,13 +203,12 @@ UserDefinedSpectralModel WelchFactory::buildAsUserDefinedSpectralModel(const Fie
   const RegularGrid timeGrid(timeSeries.getTimeGrid());
   // Initialize the equivalent process sample with the correct time grid
   ProcessSample sample(blockNumber_, Field(RegularGrid(timeGrid.getStart(), timeGrid.getStep(), blockSize), dimension));
+  const Sample values(timeSeries.getValues());
   for (UnsignedInteger blockIndex = 0; blockIndex < blockNumber_; ++blockIndex)
   {
-    for (UnsignedInteger timeIndex = 0; timeIndex < blockSize; ++timeIndex)
-    {
-      for (UnsignedInteger i = 0; i < dimension; ++i)
-        sample[blockIndex](timeIndex, i) = timeSeries.getValues()(blockIndex * hopSize + timeIndex, i);
-    } // Loop on the time index
+    std::copy(&values(blockIndex * hopSize, 0),
+              &values(blockIndex * hopSize + blockSize - 1, dimension - 1) + 1,
+              &sample[blockIndex](0, 0));
   } // Loop on the blocks
   return buildAsUserDefinedSpectralModel(sample);
 }
