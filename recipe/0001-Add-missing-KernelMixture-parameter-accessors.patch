From 9c23d86c3525b41805cee4badd4036ee8dbbc33d Mon Sep 17 00:00:00 2001
From: Julien Schueller <schueller@phimeca.com>
Date: Thu, 12 Oct 2017 10:46:17 +0200
Subject: [PATCH] Add missing KernelMixture parameter accessors

---
 lib/src/Uncertainty/Distribution/KernelMixture.cxx | 58 ++++++++++++++++++++++
 .../Distribution/openturns/KernelMixture.hxx       |  7 +++
 python/test/t_KernelMixture_std.expout             |  2 +
 python/test/t_KernelMixture_std.py                 |  6 ++-
 4 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/lib/src/Uncertainty/Distribution/KernelMixture.cxx b/lib/src/Uncertainty/Distribution/KernelMixture.cxx
index 366e7f8..18610af 100644
--- a/lib/src/Uncertainty/Distribution/KernelMixture.cxx
+++ b/lib/src/Uncertainty/Distribution/KernelMixture.cxx
@@ -661,6 +661,64 @@ KernelMixture::PointWithDescriptionCollection KernelMixture::getParametersCollec
   return parameters;
 } // getParametersCollection
 
+
+Point KernelMixture::getParameter() const
+{
+  const UnsignedInteger size = sample_.getSize();
+  Point parameter;
+  for (UnsignedInteger i = 0; i < size; ++ i)
+  {
+    parameter.add(sample_[i]);
+  }
+  parameter.add(bandwidth_);
+  return parameter;
+}
+
+Description KernelMixture::getParameterDescription() const
+{
+  const UnsignedInteger dimension = getDimension();
+  const UnsignedInteger size = sample_.getSize();
+  Description description;
+  for (UnsignedInteger i = 0; i < size; ++ i)
+  {
+    if (dimension > 1)
+      for (UnsignedInteger j = 0; j < dimension; ++ j)
+        description.add(OSS() << "x_" << i << "^" << j);
+    else
+      description.add(OSS() << "x_" << i);
+  }
+
+  if (dimension > 1)
+    for (UnsignedInteger j = 0; j < dimension; ++ j)
+      description.add(OSS() << "h_" << j);
+  else
+    description.add(OSS() << "h");
+  return description;
+}
+
+
+void KernelMixture::setParameter(const Point & parameter)
+{
+  const UnsignedInteger dimension = getDimension();
+  const UnsignedInteger size = sample_.getSize();
+  if (parameter.getDimension() != (dimension * (size + 1))) throw InvalidArgumentException(HERE) << "Expected " << (dimension * (size + 1)) << " parameters";
+  UnsignedInteger index = 0;
+  for (UnsignedInteger i = 0; i < size; ++ i)
+  {
+    for (UnsignedInteger j = 0; j < dimension; ++ j)
+    {
+      sample_[i][j] = parameter[index];
+      ++ index;
+    }
+  }
+  for (UnsignedInteger j = 0; j < dimension; ++ j)
+  {
+    bandwidth_[j] = parameter[index];
+    ++ index;
+  }
+}
+
+
 /* Check if the distribution is elliptical */
 Bool KernelMixture::isElliptical() const
 {
diff --git a/lib/src/Uncertainty/Distribution/openturns/KernelMixture.hxx b/lib/src/Uncertainty/Distribution/openturns/KernelMixture.hxx
index 734cc21..456ca30 100644
--- a/lib/src/Uncertainty/Distribution/openturns/KernelMixture.hxx
+++ b/lib/src/Uncertainty/Distribution/openturns/KernelMixture.hxx
@@ -128,6 +128,13 @@ public:
   /** Parameters value and description accessor */
   PointWithDescriptionCollection getParametersCollection() const;
 
+  /** Parameters value accessors */
+  void setParameter(const Point & parameter);
+  Point getParameter() const;
+
+  /** Parameters description accessor */
+  Description getParameterDescription() const;
+
   /** Check if the distribution is elliptical */
   Bool isElliptical() const;
 
diff --git a/python/test/t_KernelMixture_std.expout b/python/test/t_KernelMixture_std.expout
index e6747fc..4c393f4 100644
--- a/python/test/t_KernelMixture_std.expout
+++ b/python/test/t_KernelMixture_std.expout
@@ -35,3 +35,5 @@ mean= class=Point name=Unnamed dimension=3 values=[1.5,0.5,2]
 mean (ref)= class=Point name=Unnamed dimension=3 values=[1.5,0.5,2]
 covariance= class=CovarianceMatrix dimension=3 implementation=class=MatrixImplementation name=Unnamed rows=3 columns=3 values=[4.66667,0.666667,0.666667,0.666667,9.66667,0.666667,0.666667,0.666667,1.66667]
 covariance (ref)= class=CovarianceMatrix dimension=3 implementation=class=MatrixImplementation name=Unnamed rows=3 columns=3 values=[4.66667,0.666667,0.666667,0.666667,9.66667,0.666667,0.666667,0.666667,1.66667]
+parameters= [0.5,-0.5,1,1.5,0.5,2,2.5,1.5,3,2,3,1]#12
+parametersDesc= [x_0^0,x_0^1,x_0^2,x_1^0,x_1^1,x_1^2,x_2^0,x_2^1,x_2^2,h_0,h_1,h_2]#12
diff --git a/python/test/t_KernelMixture_std.py b/python/test/t_KernelMixture_std.py
index 31666a8..2b8cd50 100755
--- a/python/test/t_KernelMixture_std.py
+++ b/python/test/t_KernelMixture_std.py
@@ -148,8 +148,10 @@ try:
     covariance = distribution.getCovariance()
     print("covariance=", repr(covariance))
     print("covariance (ref)=", repr(distributionRef.getCovariance()))
-    # parameters = distribution.getParametersCollection()
-    # print "parameters=" , parameters
+    parameters = distribution.getParameter()
+    print("parameters=" , parameters)
+    print("parametersDesc=" , distribution.getParameterDescription())
+    distribution.setParameter(parameters)
 
 except:
     import sys
-- 
2.7.4

