From 2cfb9f056898ebc4f64ca59a29892124e87bdf5a Mon Sep 17 00:00:00 2001
From: Julien Schueller <schueller@phimeca.com>
Date: Mon, 17 Jun 2024 13:51:06 +0200
Subject: [PATCH] Function: Fix for numpy 2.0

---
 .../vectorial_functions/plot_python_function.py               | 2 +-
 .../general_purpose_metamodels/plot_expert_mixture.py         | 2 +-
 python/src/Function.i                                         | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/python/doc/examples/functional_modeling/vectorial_functions/plot_python_function.py b/python/doc/examples/functional_modeling/vectorial_functions/plot_python_function.py
index 1ea1f8bf1c..0f4ed38cc3 100644
--- a/python/doc/examples/functional_modeling/vectorial_functions/plot_python_function.py
+++ b/python/doc/examples/functional_modeling/vectorial_functions/plot_python_function.py
@@ -65,7 +65,7 @@ def regularFunc(X):
 
 def regularFuncSample(X):
     # Create a numpy array with the contents of X without copy
-    xarray = np.array(X, copy=False)
+    xarray = np.asarray(X)
     # Get columns as vectors, there is also no copy
     x0, x1, x2 = xarray.T
     # Allocate a numpy array to store result
diff --git a/python/doc/examples/meta_modeling/general_purpose_metamodels/plot_expert_mixture.py b/python/doc/examples/meta_modeling/general_purpose_metamodels/plot_expert_mixture.py
index df9ae02123..540d021b5c 100644
--- a/python/doc/examples/meta_modeling/general_purpose_metamodels/plot_expert_mixture.py
+++ b/python/doc/examples/meta_modeling/general_purpose_metamodels/plot_expert_mixture.py
@@ -54,7 +54,7 @@ def piecewise(X):
     #     f = (x+0.75)**2-0.75**2
     # else:
     #     f = 2.0-x**2
-    xarray = np.array(X, copy=False)
+    xarray = np.asarray(X)
     return np.piecewise(
         xarray,
         [xarray < 0, xarray >= 0],
diff --git a/python/src/Function.i b/python/src/Function.i
index ef82074d5d..9112158913 100644
--- a/python/src/Function.i
+++ b/python/src/Function.i
@@ -278,7 +278,7 @@ def _exec_sample_multiprocessing_func_sample(func_sample, n_cpus):
         if nsim < n_cpus:
             return func_sample(X)
 
-        a = np.array(X, copy=False)
+        a = np.asarray(X)
         rs = p.map(func_sample, [a[r:r+(nsim//n_cpus), :] for r in range(0, nsim, nsim//n_cpus)])
         p.close()
         p.join()
@@ -367,7 +367,7 @@ class PythonFunction(Function):
     >>> import openturns as ot
     >>> import numpy as np
     >>> def a_exec_sample(X):
-    ...     Xarray = np.array(X, copy=False)
+    ...     Xarray = np.asarray(X)
     ...     Y = 3.0 * Xarray[:,0] - Xarray[:,1]
     ...     return np.expand_dims(Y, axis=1)
     >>> def a_grad(X):
