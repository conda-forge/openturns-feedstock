diff --git a/lib/test/t_Bonmin_std.cxx b/lib/test/t_Bonmin_std.cxx
index 02fdffeac..ad11ef5c5 100644
--- a/lib/test/t_Bonmin_std.cxx
+++ b/lib/test/t_Bonmin_std.cxx
@@ -39,32 +39,15 @@ int main()
 
   try
   {
-    /* TEST ON SIMPLE FUNCTION */
-
     // Definition of objective function
     const Description inputVariables = {"x0", "x1", "x2", "x3"};
     Description objective(1, "-x0 -x1 -x2");
     SymbolicFunction objectiveFunction(inputVariables, objective);
 
     // Definition of bounds
-    Point variablesLowerBounds(4);
-    Point variablesUpperBounds(4);
-    Collection<UnsignedInteger> variablesFiniteLowerBounds(4, 1);
-    Collection<UnsignedInteger> variablesFiniteUpperBounds(4, 1);
-    variablesLowerBounds[0] = 0;
-    variablesUpperBounds[0] = 1;
-
-    variablesLowerBounds[1] = 0;
-    variablesUpperBounds[1] = DBL_MAX;
-    variablesFiniteUpperBounds[1] = 0;
-
-    variablesLowerBounds[2] = 0;
-    variablesUpperBounds[2] = DBL_MAX;
-    variablesFiniteUpperBounds[2] = 0;
-
-    variablesLowerBounds[3] = 0;
-    variablesUpperBounds[3] = 5;
-    Interval variablesBounds(variablesLowerBounds, variablesUpperBounds, variablesFiniteLowerBounds, variablesFiniteUpperBounds) ;
+    const Point lowerBounds(4, 0.0);
+    const Point upperBounds = {1.0, 1e6, 1e6, 5.0};
+    const Interval bounds(lowerBounds, upperBounds);
 
     // Definition of inequality constraints:
     // Bonmin constraints are defined as g_l <= g(x) <= g_u
@@ -84,7 +67,7 @@ int main()
 
     // Definition of OptimizationProblem
     OptimizationProblem problem(objectiveFunction);
-    problem.setBounds(variablesBounds);
+    problem.setBounds(bounds);
     problem.setVariablesType(varTypes);
     problem.setInequalityConstraint(inequalityConstraints);
 
diff --git a/python/test/t_Bonmin_4dsoo.py b/python/test/t_Bonmin_4dsoo.py
index 6e2262192..7e482aa31 100755
--- a/python/test/t_Bonmin_4dsoo.py
+++ b/python/test/t_Bonmin_4dsoo.py
@@ -37,8 +37,7 @@ objectiveFun = ot.PythonFunction(4, 1, fourdsoo)
 
 x = [-5, -3, 1, 1]
 
-print("Evaluate f at x=", x)
-print("f(x)=", objectiveFun(x))
+print(f"f(x)={objectiveFun(x)}")
 
 # Define bounds
 bounds = ot.Interval([-5.0, -3.0, 0.0, 0.0], [5.0, 3.0, 1, 1])
@@ -57,20 +56,22 @@ problem.setVariablesType(varTypes)
 problem.setBounds(bounds)
 problem.setMinimization(True)
 
-x0 = [0, 0, 0, 0]
-algo = ot.Bonmin(problem, "B-BB")
+x0 = [0.0] * 4
+algo = ot.Bonmin(problem)
 algo.setStartingPoint(x0)
 algo.setMaximumCallsNumber(10000)
 algo.setMaximumIterationNumber(1000)
-algo.run()
 
-result = algo.getResult()
-x_star = result.getOptimalPoint()
-print("x*=", x_star)
-y_star = result.getOptimalValue()
-neval = result.getCallsNumber()
-print("f(x*)=", y_star, "neval=", neval)
-
-
-# ASSERTION
-ott.assert_almost_equal(x_star, [-5, -3, 1, 1], 5e-4)
+for name in ot.Bonmin.GetAlgorithmNames():
+    if name in ["B-OA", "B-QG", "B-Ecp"]:
+        continue
+    print(f"-- {name} algorithm...")
+    algo.setAlgorithmName(name)
+    algo.run()
+    result = algo.getResult()
+    x_star = result.getOptimalPoint()
+    print(f"x*={x_star}")
+    y_star = result.getOptimalValue()
+    neval = result.getCallsNumber()
+    print(f"f(x*)={y_star} neval={neval}")
+    ott.assert_almost_equal(x_star, [-5, -3, 1, 1], 5e-4)
diff --git a/python/test/t_Bonmin_MIT15.py b/python/test/t_Bonmin_MIT15.py
index aaa86f270..826ecf322 100755
--- a/python/test/t_Bonmin_MIT15.py
+++ b/python/test/t_Bonmin_MIT15.py
@@ -26,14 +26,13 @@ constraintFun = ot.SymbolicFunction(
     ["x", "y", "z", "t"], ["-(8*x + 5*y + 3*z + 2*t -10)"]
 )
 x = [0, 1, 1, 1]
-print("Evaluate f at x=", x)
-print("f(x)=", objectiveFun(x))
-print("g(x)=", constraintFun(x))
+print(f"f(x)={objectiveFun(x)}")
+print(f"g(x)={constraintFun(x)}")
 
 # Define problem
 problem = ot.OptimizationProblem(objectiveFun)
 problem.setInequalityConstraint(constraintFun)
-bounds = ot.Interval([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0])
+bounds = ot.Interval([0.0] * 4, [1.0] * 4)
 problem.setBounds(bounds)
 problem.setMinimization(True)
 problem.setVariablesType(
@@ -46,23 +45,24 @@ problem.setVariablesType(
 )
 
 # Define OptimizationAlgorithm
-x0 = [0.0, 0.0, 0.0, 0.0]
-algo = ot.Bonmin(problem, "B-BB")
+x0 = [0.0] * 4
+algo = ot.Bonmin(problem)
 algo.setStartingPoint(x0)
 algo.setMaximumCallsNumber(10000)
 algo.setMaximumIterationNumber(1000)
-algo.run()
 
-# Retrieve result
-result = algo.getResult()
-x_star = result.getOptimalPoint()
-print("x*=", x_star)
-y_star = result.getOptimalValue()
-neval = result.getCallsNumber()
-print("f(x*)=", y_star, "neval=", neval)
 
-print("g(x*)=", constraintFun(x_star))
+for name in ot.Bonmin.GetAlgorithmNames():
+    print(f"-- {name} algorithm...")
+    algo.setAlgorithmName(name)
+    algo.run()
 
-
-# ASSERTION
-ott.assert_almost_equal(x_star, [0, 1, 1, 1], 1, 5e-4)
+    # Retrieve result
+    result = algo.getResult()
+    x_star = result.getOptimalPoint()
+    print("x*=", x_star)
+    y_star = result.getOptimalValue()
+    neval = result.getCallsNumber()
+    print(f"f(x*)={y_star} neval={neval}")
+    print(f"g(x*)={constraintFun(x_star)}")
+    ott.assert_almost_equal(x_star, [0, 1, 1, 1], 1, 5e-4)
diff --git a/python/test/t_Bonmin_std.py b/python/test/t_Bonmin_std.py
index 01ee596dd..5681281aa 100755
--- a/python/test/t_Bonmin_std.py
+++ b/python/test/t_Bonmin_std.py
@@ -22,12 +22,7 @@ for algo in ot.Bonmin.GetAlgorithmNames():
 objectiveFunction = ot.SymbolicFunction(["x0", "x1", "x2", "x3"], ["-x0 -x1 -x2"])
 
 # Definition of variables bounds
-bounds = ot.Interval(
-    [0, 0, 0, 0],
-    [1, 1e308, 1e308, 5],
-    [True, True, True, True],
-    [True, False, False, True],
-)
+bounds = ot.Interval([0, 0, 0, 0], [1, 1e6, 1e6, 5])
 
 # Definition of constraints
 # Constraints in OpenTURNS are defined as g(x) = 0 and h(x) >= 0
@@ -52,18 +47,20 @@ problem.setBounds(bounds)
 problem.setVariablesType(variablesType)
 problem.setInequalityConstraint(h)
 
-bonminAlgorithm = ot.Bonmin(problem, "B-BB")
-bonminAlgorithm.setStartingPoint([0, 0, 0, 0])
-bonminAlgorithm.setMaximumCallsNumber(10000)
-bonminAlgorithm.setProgressCallback(progress)
-bonminAlgorithm.setStopCallback(stop)
+algo = ot.Bonmin(problem)
+algo.setStartingPoint([0, 0, 0, 0])
+algo.setMaximumCallsNumber(10000)
+algo.setProgressCallback(progress)
+algo.setStopCallback(stop)
 
-for algo in ot.Bonmin.GetAlgorithmNames():
-    print("MINIMIZATION WITH " + algo)
-    bonminAlgorithm.setAlgorithmName(algo)
-    bonminAlgorithm.run()
-    result = bonminAlgorithm.getResult()
-    print(" -- Optimal point = " + result.getOptimalPoint().__str__())
-    print(" -- Optimal value = " + result.getOptimalValue().__str__())
-    print(" -- Evaluation number = " + result.getInputSample().getSize().__str__())
+for name in ot.Bonmin.GetAlgorithmNames():
+    print(f"-- {name} algorithm...")
+    algo.setAlgorithmName(name)
+    algo.run()
+    result = algo.getResult()
+    x_star = result.getOptimalPoint()
+    print(f"x*={x_star}")
+    y_star = result.getOptimalValue()
+    neval = result.getCallsNumber()
+    print(f"f(x*)={y_star} neval={neval}")
     ott.assert_almost_equal(result.getOptimalPoint(), [1, 1, 0.5, 0], 1, 1e-2)
diff --git a/python/test/t_Bonmin_swiler2014.py b/python/test/t_Bonmin_swiler2014.py
index 8cad1528c..52d56f044 100755
--- a/python/test/t_Bonmin_swiler2014.py
+++ b/python/test/t_Bonmin_swiler2014.py
@@ -42,11 +42,11 @@ def swiler2014(x):
 objectiveFun = ot.PythonFunction(3, 1, swiler2014)
 x = [1, 0, 0.25]
 print("Evaluate f at x=", x)
-print("f(x)=", objectiveFun(x))
+print(f"f(x)={objectiveFun(x)}")
 
 # Define OptimizationProblem
 problem = ot.OptimizationProblem(objectiveFun)
-bounds = ot.Interval([0.0, 0.0, 0], [1.0, 1.0, 4])
+bounds = ot.Interval([0.0] * 3, [1.0, 1.0, 4.0])
 varTypes = [
     ot.OptimizationProblemImplementation.INTEGER,
     ot.OptimizationProblemImplementation.CONTINUOUS,
@@ -57,21 +57,23 @@ problem.setVariablesType(varTypes)
 problem.setMinimization(True)
 
 # Define OptimizationAlgorithm
-x0 = [0] * 3
-algo = ot.Bonmin(problem, "B-BB")
+x0 = [0.0] * 3
+algo = ot.Bonmin(problem)
 algo.setStartingPoint(x0)
 algo.setMaximumCallsNumber(10000)
 algo.setMaximumIterationNumber(1000)
-algo.run()
 
-# Retrieve result
-result = algo.getResult()
-x_star = result.getOptimalPoint()
-print("x*=", x_star)
-y_star = result.getOptimalValue()
-neval = result.getCallsNumber()
-print("f(x*)=", y_star, "neval=", neval)
 
+for name in ot.Bonmin.GetAlgorithmNames():
+    print(f"-- {name} algorithm...")
+    algo.setAlgorithmName(name)
+    algo.run()
 
-# ASSERTIONS
-ott.assert_almost_equal(x_star, [1.0, 0.0, 0.25], 1, 5e-4)
+    # Retrieve result
+    result = algo.getResult()
+    x_star = result.getOptimalPoint()
+    print(f"x*={x_star}")
+    y_star = result.getOptimalValue()
+    neval = result.getCallsNumber()
+    print(f"f(x*)={y_star} neval={neval}")
+    ott.assert_almost_equal(x_star, [1.0, 0.0, 0.25], 1, 5e-4)
