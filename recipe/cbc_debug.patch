diff --git a/Cbc/src/CbcModel.cpp b/Cbc/src/CbcModel.cpp
index 235d8a72..527e97be 100644
--- a/Cbc/src/CbcModel.cpp
+++ b/Cbc/src/CbcModel.cpp
@@ -10,6 +10,7 @@
 
 #include "CbcConfig.h"
 
+#include <iostream>
 #include <string>
 //#define CBC_DEBUG 1
 //#define CHECK_CUT_COUNTS
@@ -1673,6 +1674,7 @@ static double lengthConflictCuts = 0.0;
 void CbcModel::branchAndBound(int doStatistics)
 
 {
+  std::cout << "CbcModel::branchAndBound0 this="<<this << std::endl<< std::flush;
   if (!parentModel_) {
     /*
 	Capture a time stamp before we start (unless set).
@@ -1778,6 +1780,7 @@ void CbcModel::branchAndBound(int doStatistics)
         originalContinuousObjective_ = COIN_DBL_MAX;
         if (flipObjective)
           flipModel();
+        std::cout << "CbcModel::branchAndBound this=" << this  << " return 5" <<  std::endl<< std::flush;
         return;
       } else if (numberObjects_ && object_) {
         numberOriginalObjects = numberObjects_;
@@ -2178,10 +2181,12 @@ void CbcModel::branchAndBound(int doStatistics)
       solver_ = continuousSolver_;
       setPointers(solver_);
       continuousSolver_ = NULL;
+      std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 1" <<  std::endl<< std::flush;
     }
     solverCharacteristics_ = NULL;
     if (flipObjective)
       flipModel();
+     std::cout << "CbcModel::branchAndBound this=" << this  << " return 6" <<  std::endl<< std::flush;
     return;
   } else if (!numberObjects_) {
     // nothing to do
@@ -2235,6 +2240,7 @@ void CbcModel::branchAndBound(int doStatistics)
     delete[] bestSolution_;
     bestSolution_ = new double[numberColumns];
     CoinCopyN(solver_->getColSolution(), numberColumns, bestSolution_);
+     std::cout << "CbcModel::branchAndBound this=" << this  << " return 7" <<  std::endl<< std::flush;
     return;
   }
   /*
@@ -2959,6 +2965,7 @@ void CbcModel::branchAndBound(int doStatistics)
     OsiSolverInterface *solverOriginal = solver_;
     OsiSolverInterface *continuousSolver = continuousSolver_;
     continuousSolver_ = NULL;
+    std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 2" <<  std::endl<< std::flush;
     int numberOriginalRows = solverOriginal->getNumRows();
     OsiSolverInterface *solver = solverOriginal->clone();
     solver_ = solver;
@@ -3098,6 +3105,7 @@ void CbcModel::branchAndBound(int doStatistics)
       // have to switch nauty off totally!
       moreSpecialOptions2_ &= ~(128 | 256);
     }
+    std::cout << "CbcModel::branchAndBound this=" << this << " continuousSolver=" << continuousSolver << std::endl << std::flush;
     continuousSolver_ = continuousSolver;
     int numberRows = solver->getNumRows();
     if (numberRows > numberOriginalRows) {
@@ -3836,6 +3844,7 @@ void CbcModel::branchAndBound(int doStatistics)
     delete saveSolver;
     if (flipObjective)
       flipModel();
+     std::cout << "CbcModel::branchAndBound this=" << this  << " return 8" <<  std::endl<< std::flush;
     return;
   }
   /*
@@ -5571,6 +5580,7 @@ void CbcModel::branchAndBound(int doStatistics)
     solver_ = continuousSolver_;
     setPointers(solver_);
     continuousSolver_ = NULL;
+    std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 2" <<  std::endl<< std::flush;
   }
   /*
       Clean up dangling objects. continuousSolver_ may already be toast.
@@ -5600,9 +5610,12 @@ void CbcModel::branchAndBound(int doStatistics)
   //delete persistentInfo;
   // Get rid of characteristics
   solverCharacteristics_ = NULL;
+
+  std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 4 ? " << (continuousSolver_ != NULL) << std::endl<< std::flush;
   if (continuousSolver_) {
     delete continuousSolver_;
     continuousSolver_ = NULL;
+    std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 4" <<  std::endl<< std::flush;
   }
   /*
       Destroy global cuts by replacing with an empty OsiCuts object.
@@ -5698,6 +5711,7 @@ void CbcModel::branchAndBound(int doStatistics)
   }
 #endif
   moreSpecialOptions_ = saveMoreSpecialOptions;
+   std::cout << "CbcModel::branchAndBound this=" << this << " return 9" <<  std::endl<< std::flush;
   return;
 }
 
@@ -6456,10 +6470,12 @@ CbcModel::CbcModel(const CbcModel &rhs, bool cloneHandler)
     numberObjects_ = 0;
     object_ = NULL;
   }
+  std::cout << "CbcModel this=" << this << " rhs.continuousSolver_ ?" << (rhs.continuousSolver_!=NULL) <<  std::endl<< std::flush;
   if (rhs.continuousSolver_) {
     continuousSolver_ = rhs.continuousSolver_->clone();
   } else {
     continuousSolver_ = NULL;
+    std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 5" <<  std::endl<< std::flush;
   }
   if (rhs.referenceSolver_)
     referenceSolver_ = rhs.referenceSolver_->clone();
@@ -6969,6 +6985,7 @@ CbcModel::~CbcModel()
   }
   delete tree_;
   tree_ = NULL;
+  std::cout << "CbcModel::~CbcModel.2 this="<<this<<" solver_="<<solver_<<" continuousSolver_=" << continuousSolver_ <<  std::endl<< std::flush;
   if (modelOwnsSolver()) {
     delete solver_;
     solver_ = NULL;
@@ -7049,8 +7066,10 @@ void CbcModel::resetModel()
 {
   delete emptyWarmStart_;
   emptyWarmStart_ = NULL;
+  std::cout << "CbcModel::resetModel this="<<this<<" continuousSolver_=" << continuousSolver_ << std::endl<< std::flush;
   delete continuousSolver_;
   continuousSolver_ = NULL;
+  std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 6" <<  std::endl<< std::flush;
   numberSavedSolutions_ = 0;
   delete[] bestSolution_;
   bestSolution_ = NULL;
@@ -18200,6 +18219,7 @@ bool CbcModel::integerPresolveThisModel(OsiSolverInterface *originalSolver,
   solverCharacteristics_->setSolver(solver_);
   // just point to solver_
   delete continuousSolver_;
+  std::cout << "CbcModel::integerPresolveThisModel this=" << this << " solver_=" << solver_ << std::endl<< std::flush;
   continuousSolver_ = solver_;
   // get a copy of original so we can fix bounds
   OsiSolverInterface *cleanModel = originalSolver->clone();
@@ -18361,6 +18381,7 @@ bool CbcModel::integerPresolveThisModel(OsiSolverInterface *originalSolver,
         }
         synchronizeModel(); // make sure everything that needs solver has it
         // just point to solver_
+        std::cout << "CbcModel::integerPresolveThisModel this=" << this << " solver_=" << solver_ << std::endl << std::flush;
         continuousSolver_ = solver_;
         feasible = (resolve(NULL, 3) != 0);
         if (!feasible || !doIntegerPresolve || weak)
@@ -18484,6 +18505,7 @@ bool CbcModel::integerPresolveThisModel(OsiSolverInterface *originalSolver,
   deleteObjects();
   synchronizeModel(); // make sure everything that needs solver has it
   continuousSolver_ = NULL;
+  std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 7" <<  std::endl<< std::flush;
   currentNumberCuts_ = 0;
   return feasible;
 }
@@ -19045,6 +19067,7 @@ CbcModel::strengthenedModel()
   if (continuousSolver_) {
     delete continuousSolver_;
     continuousSolver_ = NULL;
+    std::cout << "CbcModel this=" << this  << " continuousSolver_.NULL 8" <<  std::endl<< std::flush;
   }
   /*
       Destroy global cuts by replacing with an empty OsiCuts object.
